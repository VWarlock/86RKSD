;// SD Controller for Computer "Radio 86RK" / "Apogee BK01"
;// (c) 10-05-2014 vinxru (aleksey.f.morozov@gmail.com)
;
;//#include <stdafx.h>
;
;#define F_CPU 8000000UL        //freq 8 MHz
;
;#include "common.h"
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <string.h>
;#include "sd.h"
;#include "fs.h"
;#include "proto.h"
;
;#ifndef X86_DEBUG
;#include <delay.h>
;#endif
;
;#define O_OPEN   0
;#define O_CREATE 1
;#define O_MKDIR  2
;#define O_DELETE 100
;#define O_SWAP   101
;
;#define ERR_START       0x40
;#define ERR_WAIT        0x41
;#define ERR_OK_DISK         0x42
;#define ERR_OK_CMD          0x43
;#define ERR_OK_READ         0x44
;#define ERR_OK_ENTRY        0x45
;#define ERR_OK_WRITE        0x46
;#define ERR_OK_RKS          0x47
;#define ERR_READ_BLOCK      0x4F
;
;BYTE buf[512];
;BYTE rom[128];
;
;/*******************************************************************************
;* Для удобства                                                                 *
;*******************************************************************************/
;
;void recvBin(BYTE* d, WORD l) {
; 0003 0029 void recvBin(BYTE* d, WORD l) {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0003 002A   for(; l; --l) {
;	*d -> Y+2
;	l -> Y+0
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0003 002B     *d++ = wrecv();
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0003 002C   }
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0003 002D }
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;
;void recvString() {
; 0003 002F void recvString() {
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0003 0030   BYTE c;
; 0003 0031   BYTE* p = buf;
; 0003 0032   do {
;PCODE: $0000002A VOL: 0
;	c -> R17
;	*p -> R18,R19
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0003 0033     c = wrecv();
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0003 0034     if(p != buf + FS_MAXFILE) *p++ = c; else lastError = ERR_RECV_STRING;
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0003 0035   } while(c);
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0003 0036 }
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;
;void sendBin(BYTE* p, WORD l) {
; 0003 0038 void sendBin(BYTE* p, WORD l) {
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0003 0039   for(; l; l--)
;	*p -> Y+2
;	l -> Y+0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0003 003A     send(*p++);
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0003 003B }
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;
;void sendBinf(flash BYTE* d, BYTE l) {
; 0003 003D void sendBinf(flash BYTE* d, BYTE l) {
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0003 003E   for(; l; --l)
;	*d -> Y+1
;	l -> Y+0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0003 003F     send(*d++);
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0003 0040 }
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;
;/*******************************************************************************
;* Отправка всех блоков файла                                                   *
;*******************************************************************************/
;
;WORD readLength;
;
;void readInt(char rks) {
; 0003 0048 void readInt(char rks) {
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
; 0003 0049   WORD readedLength, lengthFromFile;
; 0003 004A   BYTE tmp;
; 0003 004B   BYTE* wptr;
; 0003 004C 
; 0003 004D   while(readLength) {
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;	rks -> Y+8
;	readedLength -> R16,R17
;	lengthFromFile -> R18,R19
;	tmp -> R21
;	*wptr -> Y+6
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0003 004E     // Расчет длины блока (выравниваем чтение на сектор)
; 0003 004F     if(fs_tell()) return;
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 0003 0050     readedLength = 512 - (fs_tmp % 512);
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
; 0003 0051     if(readedLength > readLength) readedLength = readLength;
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
; 0003 0052 
; 0003 0053     // Уменьшаем счетчик
; 0003 0054     readLength -= readedLength;
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
; 0003 0055 
; 0003 0056     // Читаем блок
; 0003 0057     if(fs_read0(buf, readedLength)) return;
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
; 0003 0058 
; 0003 0059     // Заголовок RKS файла
; 0003 005A     wptr = buf;
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
; 0003 005B     if(rks) { // Если rks=1, перед вызовом надо проверить, что бы readLength>4 и fs_file.ptr=0, иначе может быть злостный сбой
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
; 0003 005C       rks = 0;
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
; 0003 005D 
; 0003 005E       // У апогея числа перепутаны
; 0003 005F       tmp=buf[0], buf[0]=buf[1]; buf[1]=tmp;
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
; 0003 0060       tmp=buf[2], buf[2]=buf[3]; buf[3]=tmp;
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
; 0003 0061 
; 0003 0062       // Посылаем адрес загрузки
; 0003 0063       send(ERR_OK_RKS);
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
; 0003 0064       sendBin(buf, 2);
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
; 0003 0065       send(ERR_WAIT);
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
; 0003 0066 
; 0003 0067       // Корректируем указатели
; 0003 0068       wptr += 4;
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
; 0003 0069       readedLength -= 4;
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
; 0003 006A 
; 0003 006B       // Длина из файла
; 0003 006C       lengthFromFile = *(WORD*)(buf+2) - *(WORD*)(buf) + 1;
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
; 0003 006D 
; 0003 006E       // Корректируем длину
; 0003 006F       if(readedLength > lengthFromFile) {
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
; 0003 0070         readedLength = lengthFromFile;
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
; 0003 0071       } else {
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
; 0003 0072         lengthFromFile -= readedLength;
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
; 0003 0073         if(readLength > lengthFromFile) lengthFromFile = readedLength;
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
; 0003 0074       }
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
; 0003 0075     }
; 0003 0076 
; 0003 0077     // Отправляем блок
; 0003 0078     send(ERR_READ_BLOCK);
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
; 0003 0079     sendBin((BYTE*)&readedLength, 2);
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
; 0003 007A     sendBin(wptr, readedLength);
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
; 0003 007B     send(ERR_WAIT);
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
; 0003 007C   }
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
; 0003 007D 
; 0003 007E   // Если все ОК
; 0003 007F   if(!lastError) lastError = ERR_OK_READ;
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
; 0003 0080 }
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;
;/*******************************************************************************
;* Версия команд контроллера                                                    *
;*******************************************************************************/
;
;void cmd_ver() {
; 0003 0086 void cmd_ver() {
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
; 0003 0087   sendStart(1);
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
; 0003 0088 
; 0003 0089   // Версия + Производитель
; 0003 008A   sendBinf("V1.0 10-05-2014 ", 16);
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
; 0003 008B               //0123456789ABCDEF
; 0003 008C }
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;
;/*******************************************************************************
;* BOOT / EXEC                                                                  *
;*******************************************************************************/
;
;void cmd_boot_exec() {
; 0003 0092 void cmd_boot_exec() {
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
; 0003 0093   // Файл по умолчанию
; 0003 0094   if(buf[0]==0) strcpyf(buf, "boot/sdbios.rk");
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
; 0003 0095 
; 0003 0096   // Открываем файл
; 0003 0097   if(fs_open()) return;
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
; 0003 0098 
; 0003 0099   // Максимальный размер файла
; 0003 009A   readLength = 0xFFFF;
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
; 0003 009B   if(fs_getfilesize()) return;
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
; 0003 009C   if(readLength > fs_tmp) readLength = (WORD)fs_tmp;
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
; 0003 009D 
; 0003 009E   // Файлы RK должны быть длиной >4 байт. Мы заносим в readLength = 0 и программа
; 0003 009F   // получает ERR_OK. Но так как она ждем ERR_OK_RKS, это будет ошибкой
; 0003 00A0   if(readLength < 4) readLength = 0;
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
; 0003 00A1 
; 0003 00A2   readInt(/*rks*/1);
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
; 0003 00A3 }
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;
;void cmd_boot() {
; 0003 00A5 void cmd_boot() {
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
; 0003 00A6   sendStart(ERR_WAIT);
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
; 0003 00A7   buf[0] = 0;
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
; 0003 00A8   cmd_boot_exec();
;PCODE: $0000013E VOL: 0
; 0003 00A9 }
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;
;void cmd_exec() {
; 0003 00AB void cmd_exec() {
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
; 0003 00AC   // Прием имени файла
; 0003 00AD   recvString();
;PCODE: $00000143 VOL: 0
; 0003 00AE 
; 0003 00AF   // Режим передачи и подтверждение
; 0003 00B0   sendStart(ERR_WAIT);
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
; 0003 00B1   if(lastError) return; // Переполнение строки
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
; 0003 00B2 
; 0003 00B3   cmd_boot_exec();
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
; 0003 00B4 }
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;
;/*******************************************************************************
;* Начать/продолжить посик файлов в папке                                       *
;*******************************************************************************/
;
;typedef struct {
;    char    fname[11];    // File name
;    BYTE    fattrib;    // Attribute
;    DWORD   fsize;        // File size
;    union {
;      struct {
;        WORD    ftime;        // Last modified time
;        WORD    fdate;        // Last modified date
;      };
;      DWORD ftimedate;
;    };
;} FILINFO2;
;
;void cmd_find() {
; 0003 00C7 void cmd_find() {
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
; 0003 00C8   WORD n;
; 0003 00C9   FILINFO2 info;
; 0003 00CA 
; 0003 00CB   // Принимаем путь
; 0003 00CC   recvString();
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
;	n -> R16,R17
;	info -> Y+2
;PCODE: $00000153 VOL: 0
; 0003 00CD 
; 0003 00CE   // Принимаем макс кол-во элементов
; 0003 00CF   recvBin((BYTE*)&n, 2);
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
; 0003 00D0 
; 0003 00D1   // Режим передачи и подтверждение
; 0003 00D2   sendStart(ERR_WAIT);
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
; 0003 00D3   if(lastError) return;
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
; 0003 00D4 
; 0003 00D5   // Открываем папку
; 0003 00D6   if(buf[0] != ':') {
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
; 0003 00D7     if(fs_opendir()) return;
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
; 0003 00D8   }
;PCODE: $00000171 VOL: 0
; 0003 00D9 
; 0003 00DA   for(; n; --n) {
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
; 0003 00DB     /* Читаем очереной описатель */
; 0003 00DC     if(fs_readdir()) return;
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
; 0003 00DD 
; 0003 00DE     /* Конец */
; 0003 00DF     if(FS_DIRENTRY[0] == 0) {
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
; 0003 00E0       lastError = ERR_OK_CMD;
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
; 0003 00E1       return;
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
; 0003 00E2     }
; 0003 00E3 
; 0003 00E4     /* Сжимаем ответ для компьютера */
; 0003 00E5     memcpy(info.fname, FS_DIRENTRY+DIR_Name, 12);
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
; 0003 00E6     memcpy(&info.fsize, FS_DIRENTRY+DIR_FileSize, 4);
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
; 0003 00E7     memcpy(&info.ftimedate, FS_DIRENTRY+DIR_WrtTime, 4);
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
; 0003 00E8     //memcpy(memcpy(memcpy(info.fname, FS_DIRENTRY+DIR_Name, 12, FS_DIRENTRY+DIR_FileSize, 4), FS_DIRENTRY+DIR_WrtTime, 4);
; 0003 00E9 
; 0003 00EA     /* Отправляем */
; 0003 00EB     send(ERR_OK_ENTRY);
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
; 0003 00EC     sendBin((BYTE*)&info, sizeof(info));
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
; 0003 00ED     send(ERR_WAIT);
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
; 0003 00EE   }
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
; 0003 00EF 
; 0003 00F0   /* Ограничение по размеру */
; 0003 00F1   lastError = ERR_MAX_FILES; /*! Надо опеределать, что бы не было ложных ошибок */
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
; 0003 00F2 }
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
;
;/*******************************************************************************
;* Открыть/создать файл/папку                                                   *
;*******************************************************************************/
;
;void cmd_open() {
; 0003 00F8 void cmd_open() {
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
; 0003 00F9   BYTE mode;
; 0003 00FA 
; 0003 00FB   /* Принимаем режим */
; 0003 00FC   mode = wrecv();
;PCODE: $000001BA VOL: 0
;	mode -> R17
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
; 0003 00FD 
; 0003 00FE   // Принимаем имя файла
; 0003 00FF   recvString();
;PCODE: $000001BD VOL: 0
; 0003 0100 
; 0003 0101   // Режим передачи и подтверждение
; 0003 0102   sendStart(ERR_WAIT);
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
; 0003 0103 
; 0003 0104   // Открываем/создаем файл/папку
; 0003 0105   if(mode == O_SWAP) {
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
; 0003 0106     fs_swap();
;PCODE: $000001C4 VOL: 0
; 0003 0107   } else
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
; 0003 0108   if(mode == O_DELETE) {
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
; 0003 0109     fs_delete();
;PCODE: $000001CA VOL: 0
; 0003 010A   } else
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
; 0003 010B   if(mode == O_OPEN) {
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
; 0003 010C     fs_open();
;PCODE: $000001CF VOL: 0
; 0003 010D   } else
;PCODE: $000001D0 VOL: 0
;PCODE: $000001D1 VOL: 0
; 0003 010E   if(mode < 3) {
;PCODE: $000001D2 VOL: 0
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
; 0003 010F     fs_open0(mode);
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
; 0003 0110   } else {
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
; 0003 0111     lastError = ERR_INVALID_COMMAND;
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
; 0003 0112   }
;PCODE: $000001DB VOL: 0
;PCODE: $000001DC VOL: 0
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
; 0003 0113 
; 0003 0114   // Ок
; 0003 0115   if(!lastError) lastError = ERR_OK_CMD;
;PCODE: $000001DF VOL: 0
;PCODE: $000001E0 VOL: 0
;PCODE: $000001E1 VOL: 0
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
; 0003 0116 }
;PCODE: $000001E4 VOL: 0
;PCODE: $000001E5 VOL: 0
;PCODE: $000001E6 VOL: 0
;PCODE: $000001E7 VOL: 0
;
;/*******************************************************************************
;* Переместить файл/папку                                                       *
;*******************************************************************************/
;
;void cmd_move() {
; 0003 011C void cmd_move() {
;PCODE: $000001E8 VOL: 0
;PCODE: $000001E9 VOL: 0
; 0003 011D   recvString();
;PCODE: $000001EA VOL: 0
; 0003 011E   sendStart(ERR_WAIT);
;PCODE: $000001EB VOL: 0
;PCODE: $000001EC VOL: 0
;PCODE: $000001ED VOL: 0
; 0003 011F   fs_openany();
;PCODE: $000001EE VOL: 0
;PCODE: $000001EF VOL: 0
;PCODE: $000001F0 VOL: 0
; 0003 0120   sendStart(ERR_OK_WRITE);
;PCODE: $000001F1 VOL: 0
;PCODE: $000001F2 VOL: 0
;PCODE: $000001F3 VOL: 0
; 0003 0121   recvStart();
;PCODE: $000001F4 VOL: 0
; 0003 0122   recvString();
;PCODE: $000001F5 VOL: 0
; 0003 0123   sendStart(ERR_WAIT);
;PCODE: $000001F6 VOL: 0
;PCODE: $000001F7 VOL: 0
;PCODE: $000001F8 VOL: 0
; 0003 0124   if(!lastError) fs_move0();
;PCODE: $000001F9 VOL: 0
;PCODE: $000001FA VOL: 0
;PCODE: $000001FB VOL: 0
;PCODE: $000001FC VOL: 0
; 0003 0125   if(!lastError) lastError = ERR_OK_CMD;
;PCODE: $000001FD VOL: 0
;PCODE: $000001FE VOL: 0
;PCODE: $000001FF VOL: 0
;PCODE: $00000200 VOL: 0
;PCODE: $00000201 VOL: 0
;PCODE: $00000202 VOL: 0
; 0003 0126 }
;PCODE: $00000203 VOL: 0
;PCODE: $00000204 VOL: 0
;PCODE: $00000205 VOL: 0
;
;/*******************************************************************************
;* Установить/прочитать указатель чтения                                        *
;*******************************************************************************/
;
;void cmd_lseek() {
; 0003 012C void cmd_lseek() {
;PCODE: $00000206 VOL: 0
;PCODE: $00000207 VOL: 0
; 0003 012D   BYTE mode;
; 0003 012E   DWORD off;
; 0003 012F 
; 0003 0130   // Принимаем режим и смещение
; 0003 0131   mode = wrecv();
;PCODE: $00000208 VOL: 0
;PCODE: $00000209 VOL: 0
;	mode -> R17
;	off -> Y+1
;PCODE: $0000020A VOL: 0
;PCODE: $0000020B VOL: 0
; 0003 0132   recvBin((BYTE*)&off, 4);
;PCODE: $0000020C VOL: 0
;PCODE: $0000020D VOL: 0
;PCODE: $0000020E VOL: 0
;PCODE: $0000020F VOL: 0
;PCODE: $00000210 VOL: 0
; 0003 0133 
; 0003 0134   // Режим передачи и подтверждение
; 0003 0135   sendStart(ERR_WAIT);
;PCODE: $00000211 VOL: 0
;PCODE: $00000212 VOL: 0
;PCODE: $00000213 VOL: 0
; 0003 0136 
; 0003 0137   // Размер файла
; 0003 0138   if(mode==100) {
;PCODE: $00000214 VOL: 0
;PCODE: $00000215 VOL: 0
;PCODE: $00000216 VOL: 0
; 0003 0139     if(fs_getfilesize()) return;
;PCODE: $00000217 VOL: 0
;PCODE: $00000218 VOL: 0
;PCODE: $00000219 VOL: 0
;PCODE: $0000021A VOL: 0
;PCODE: $0000021B VOL: 0
;PCODE: $0000021C VOL: 0
;PCODE: $0000021D VOL: 0
; 0003 013A   }
;PCODE: $0000021E VOL: 0
; 0003 013B 
; 0003 013C   // Размер диска
; 0003 013D   else if(mode==101) {
;PCODE: $0000021F VOL: 0
;PCODE: $00000220 VOL: 0
;PCODE: $00000221 VOL: 0
;PCODE: $00000222 VOL: 0
;PCODE: $00000223 VOL: 0
; 0003 013E     if(fs_gettotal()) return;
;PCODE: $00000224 VOL: 0
;PCODE: $00000225 VOL: 0
;PCODE: $00000226 VOL: 0
;PCODE: $00000227 VOL: 0
;PCODE: $00000228 VOL: 0
;PCODE: $00000229 VOL: 0
;PCODE: $0000022A VOL: 0
; 0003 013F   }
;PCODE: $0000022B VOL: 0
; 0003 0140 
; 0003 0141   // Свободное место на диске
; 0003 0142   else if(mode==102) {
;PCODE: $0000022C VOL: 0
;PCODE: $0000022D VOL: 0
;PCODE: $0000022E VOL: 0
;PCODE: $0000022F VOL: 0
;PCODE: $00000230 VOL: 0
; 0003 0143     if(fs_getfree()) return;
;PCODE: $00000231 VOL: 0
;PCODE: $00000232 VOL: 0
;PCODE: $00000233 VOL: 0
;PCODE: $00000234 VOL: 0
;PCODE: $00000235 VOL: 0
;PCODE: $00000236 VOL: 0
;PCODE: $00000237 VOL: 0
; 0003 0144   }
;PCODE: $00000238 VOL: 0
; 0003 0145 
; 0003 0146   else {
;PCODE: $00000239 VOL: 0
;PCODE: $0000023A VOL: 0
; 0003 0147     /* Устаналиваем смещение. fs_tmp сохраняется */
; 0003 0148     if(fs_lseek(off, mode)) return;
;PCODE: $0000023B VOL: 0
;PCODE: $0000023C VOL: 0
;PCODE: $0000023D VOL: 0
;PCODE: $0000023E VOL: 0
;PCODE: $0000023F VOL: 0
;PCODE: $00000240 VOL: 0
;PCODE: $00000241 VOL: 0
;PCODE: $00000242 VOL: 0
;PCODE: $00000243 VOL: 0
;PCODE: $00000244 VOL: 0
; 0003 0149   }
;PCODE: $00000245 VOL: 0
;PCODE: $00000246 VOL: 0
;PCODE: $00000247 VOL: 0
;PCODE: $00000248 VOL: 0
; 0003 014A 
; 0003 014B   // Передаем результат
; 0003 014C   send(ERR_OK_CMD);
;PCODE: $00000249 VOL: 0
;PCODE: $0000024A VOL: 0
;PCODE: $0000024B VOL: 0
; 0003 014D   sendBin((BYTE*)&fs_tmp, 4);
;PCODE: $0000024C VOL: 0
;PCODE: $0000024D VOL: 0
;PCODE: $0000024E VOL: 0
;PCODE: $0000024F VOL: 0
;PCODE: $00000250 VOL: 0
; 0003 014E   lastError = 0; // На всякий случай, результат уже передан
;PCODE: $00000251 VOL: 0
;PCODE: $00000252 VOL: 0
; 0003 014F }
;PCODE: $00000253 VOL: 0
;PCODE: $00000254 VOL: 0
;PCODE: $00000255 VOL: 0
;PCODE: $00000256 VOL: 0
;PCODE: $00000257 VOL: 0
;
;/*******************************************************************************
;* Прочитать из файла                                                           *
;*******************************************************************************/
;
;void cmd_read() {
; 0003 0155 void cmd_read() {
;PCODE: $00000258 VOL: 0
;PCODE: $00000259 VOL: 0
; 0003 0156   DWORD s;
; 0003 0157 
; 0003 0158   // Длина
; 0003 0159   recvBin((BYTE*)&readLength, 2);
;PCODE: $0000025A VOL: 0
;	s -> Y+0
;PCODE: $0000025B VOL: 0
;PCODE: $0000025C VOL: 0
;PCODE: $0000025D VOL: 0
;PCODE: $0000025E VOL: 0
;PCODE: $0000025F VOL: 0
; 0003 015A 
; 0003 015B   // Режим передачи и подтверждение
; 0003 015C   sendStart(ERR_WAIT);
;PCODE: $00000260 VOL: 0
;PCODE: $00000261 VOL: 0
;PCODE: $00000262 VOL: 0
; 0003 015D 
; 0003 015E   // Ограничиваем длину длиной файла
; 0003 015F   if(fs_getfilesize()) return;
;PCODE: $00000263 VOL: 0
;PCODE: $00000264 VOL: 0
;PCODE: $00000265 VOL: 0
;PCODE: $00000266 VOL: 0
;PCODE: $00000267 VOL: 0
; 0003 0160   s = fs_tmp;
;PCODE: $00000268 VOL: 0
;PCODE: $00000269 VOL: 0
;PCODE: $0000026A VOL: 0
; 0003 0161   if(fs_tell()) return;
;PCODE: $0000026B VOL: 0
;PCODE: $0000026C VOL: 0
;PCODE: $0000026D VOL: 0
;PCODE: $0000026E VOL: 0
;PCODE: $0000026F VOL: 0
; 0003 0162   s -= fs_tmp;
;PCODE: $00000270 VOL: 0
;PCODE: $00000271 VOL: 0
;PCODE: $00000272 VOL: 0
;PCODE: $00000273 VOL: 0
;PCODE: $00000274 VOL: 0
; 0003 0163 
; 0003 0164   if(readLength > s)
;PCODE: $00000275 VOL: 0
;PCODE: $00000276 VOL: 0
;PCODE: $00000277 VOL: 0
;PCODE: $00000278 VOL: 0
;PCODE: $00000279 VOL: 0
; 0003 0165     readLength = (WORD)s;
;PCODE: $0000027A VOL: 0
;PCODE: $0000027B VOL: 0
; 0003 0166 
; 0003 0167   // Отправляем все блоки файла
; 0003 0168   readInt(/*rks*/0);
;PCODE: $0000027C VOL: 0
;PCODE: $0000027D VOL: 0
;PCODE: $0000027E VOL: 0
;PCODE: $0000027F VOL: 0
; 0003 0169 }
;PCODE: $00000280 VOL: 0
;PCODE: $00000281 VOL: 0
;PCODE: $00000282 VOL: 0
;
;/*******************************************************************************
;* Записать данные в файл                                                       *
;*******************************************************************************/
;
;void cmd_write() {
; 0003 016F void cmd_write() {
;PCODE: $00000283 VOL: 0
;PCODE: $00000284 VOL: 0
; 0003 0170   // Аргументы
; 0003 0171   recvBin((BYTE*)&fs_wtotal, 2);
;PCODE: $00000285 VOL: 0
;PCODE: $00000286 VOL: 0
;PCODE: $00000287 VOL: 0
;PCODE: $00000288 VOL: 0
;PCODE: $00000289 VOL: 0
; 0003 0172 
; 0003 0173   // Ответ
; 0003 0174   sendStart(ERR_WAIT);
;PCODE: $0000028A VOL: 0
;PCODE: $0000028B VOL: 0
;PCODE: $0000028C VOL: 0
; 0003 0175 
; 0003 0176   // Конец файла
; 0003 0177   if(fs_wtotal==0) {
;PCODE: $0000028D VOL: 0
;PCODE: $0000028E VOL: 0
;PCODE: $0000028F VOL: 0
; 0003 0178     fs_write_eof();
;PCODE: $00000290 VOL: 0
; 0003 0179     lastError = ERR_OK_CMD;
;PCODE: $00000291 VOL: 0
;PCODE: $00000292 VOL: 0
; 0003 017A     return;
;PCODE: $00000293 VOL: 0
; 0003 017B   }
; 0003 017C 
; 0003 017D   // Запись данных
; 0003 017E   do {
;PCODE: $00000294 VOL: 0
;PCODE: $00000295 VOL: 0
; 0003 017F     if(fs_write_start()) return;
;PCODE: $00000296 VOL: 0
;PCODE: $00000297 VOL: 0
;PCODE: $00000298 VOL: 0
;PCODE: $00000299 VOL: 0
; 0003 0180 
; 0003 0181     // Принимаем от компьюетра блок данных
; 0003 0182     send(ERR_OK_WRITE);
;PCODE: $0000029A VOL: 0
;PCODE: $0000029B VOL: 0
;PCODE: $0000029C VOL: 0
;PCODE: $0000029D VOL: 0
; 0003 0183     sendBin((BYTE*)&fs_file_wlen, 2);
;PCODE: $0000029E VOL: 0
;PCODE: $0000029F VOL: 0
;PCODE: $000002A0 VOL: 0
;PCODE: $000002A1 VOL: 0
;PCODE: $000002A2 VOL: 0
; 0003 0184     recvStart();
;PCODE: $000002A3 VOL: 0
; 0003 0185     recvBin(fs_file_wbuf, fs_file_wlen);
;PCODE: $000002A4 VOL: 0
;PCODE: $000002A5 VOL: 0
;PCODE: $000002A6 VOL: 0
;PCODE: $000002A7 VOL: 0
;PCODE: $000002A8 VOL: 0
;PCODE: $000002A9 VOL: 0
;PCODE: $000002AA VOL: 0
; 0003 0186     sendStart(ERR_WAIT);
;PCODE: $000002AB VOL: 0
;PCODE: $000002AC VOL: 0
;PCODE: $000002AD VOL: 0
; 0003 0187 
; 0003 0188     if(fs_write_end()) return;
;PCODE: $000002AE VOL: 0
;PCODE: $000002AF VOL: 0
;PCODE: $000002B0 VOL: 0
;PCODE: $000002B1 VOL: 0
; 0003 0189   } while(fs_wtotal);
;PCODE: $000002B2 VOL: 0
;PCODE: $000002B3 VOL: 0
;PCODE: $000002B4 VOL: 0
;PCODE: $000002B5 VOL: 0
;PCODE: $000002B6 VOL: 0
;PCODE: $000002B7 VOL: 0
;PCODE: $000002B8 VOL: 0
; 0003 018A 
; 0003 018B   lastError = ERR_OK_CMD;
;PCODE: $000002B9 VOL: 0
;PCODE: $000002BA VOL: 0
; 0003 018C }
;PCODE: $000002BB VOL: 0
;PCODE: $000002BC VOL: 0
;
;/*******************************************************************************
;* Главная процедура                                                            *
;*******************************************************************************/
;
;void error() {
; 0003 0192 void error() {
;PCODE: $000002BD VOL: 0
;PCODE: $000002BE VOL: 0
; 0003 0193   for(;;) {
;PCODE: $000002BF VOL: 0
;PCODE: $000002C0 VOL: 0
; 0003 0194     PORTB.0 = 1;
;PCODE: $000002C1 VOL: 0
;PCODE: $000002C2 VOL: 0
; 0003 0195     delay_ms(100);
;PCODE: $000002C3 VOL: 0
;PCODE: $000002C4 VOL: 0
;PCODE: $000002C5 VOL: 0
; 0003 0196     PORTB.0 = 0;
;PCODE: $000002C6 VOL: 0
;PCODE: $000002C7 VOL: 0
; 0003 0197     delay_ms(100);
;PCODE: $000002C8 VOL: 0
;PCODE: $000002C9 VOL: 0
;PCODE: $000002CA VOL: 0
; 0003 0198   }
;PCODE: $000002CB VOL: 0
;PCODE: $000002CC VOL: 0
;PCODE: $000002CD VOL: 0
; 0003 0199 }
;PCODE: $000002CE VOL: 0
;PCODE: $000002CF VOL: 0
;
;void main() {
; 0003 019B void main() {
;PCODE: $000002D0 VOL: 0
; 0003 019C   BYTE c, d;
; 0003 019D 
; 0003 019E   DATA_OUT            // Шина данных (DDRD)
;	c -> R17
;	d -> R16
;PCODE: $000002D1 VOL: 0
;PCODE: $000002D2 VOL: 0
; 0003 019F   DDRC  = 0b00000000; // Шина адреса
;PCODE: $000002D3 VOL: 0
;PCODE: $000002D4 VOL: 0
; 0003 01A0   DDRB  = 0b00101101; // Шина адреса, карта и светодиод
;PCODE: $000002D5 VOL: 0
;PCODE: $000002D6 VOL: 0
; 0003 01A1   PORTB = 0b00010001; // Подтягивающий резистор на MISO и светодиод
;PCODE: $000002D7 VOL: 0
;PCODE: $000002D8 VOL: 0
; 0003 01A2 
; 0003 01A3   // Пауза, пока не стабилизируется питание
; 0003 01A4   delay_ms(100);
;PCODE: $000002D9 VOL: 0
;PCODE: $000002DA VOL: 0
;PCODE: $000002DB VOL: 0
; 0003 01A5 
; 0003 01A6   // Запуск файловой системы
; 0003 01A7   if(fs_init()) error();
;PCODE: $000002DC VOL: 0
;PCODE: $000002DD VOL: 0
;PCODE: $000002DE VOL: 0
;PCODE: $000002DF VOL: 0
; 0003 01A8   strcpyf(buf, "boot/boot.rk");
;PCODE: $000002E0 VOL: 0
;PCODE: $000002E1 VOL: 0
;PCODE: $000002E2 VOL: 0
;PCODE: $000002E3 VOL: 0
;PCODE: $000002E4 VOL: 0
;PCODE: $000002E5 VOL: 0
;PCODE: $000002E6 VOL: 0
; 0003 01A9   if(fs_open()) error();
;PCODE: $000002E7 VOL: 0
;PCODE: $000002E8 VOL: 0
;PCODE: $000002E9 VOL: 0
;PCODE: $000002EA VOL: 0
; 0003 01AA   if(fs_getfilesize()) error();
;PCODE: $000002EB VOL: 0
;PCODE: $000002EC VOL: 0
;PCODE: $000002ED VOL: 0
;PCODE: $000002EE VOL: 0
;PCODE: $000002EF VOL: 0
; 0003 01AB   if(fs_tmp < 7) error();
;PCODE: $000002F0 VOL: 0
;PCODE: $000002F1 VOL: 0
;PCODE: $000002F2 VOL: 0
;PCODE: $000002F3 VOL: 0
;PCODE: $000002F4 VOL: 0
; 0003 01AC   if(fs_tmp > 128) error();
;PCODE: $000002F5 VOL: 0
;PCODE: $000002F6 VOL: 0
;PCODE: $000002F7 VOL: 0
;PCODE: $000002F8 VOL: 0
;PCODE: $000002F9 VOL: 0
; 0003 01AD   if(fs_read0(rom, (WORD)fs_tmp)) error();
;PCODE: $000002FA VOL: 0
;PCODE: $000002FB VOL: 0
;PCODE: $000002FC VOL: 0
;PCODE: $000002FD VOL: 0
;PCODE: $000002FE VOL: 0
;PCODE: $000002FF VOL: 0
;PCODE: $00000300 VOL: 0
;PCODE: $00000301 VOL: 0
;PCODE: $00000302 VOL: 0
; 0003 01AE 
; 0003 01AF   // Гасим светодиод
; 0003 01B0   PORTB.0 = 0;
;PCODE: $00000303 VOL: 0
;PCODE: $00000304 VOL: 0
;PCODE: $00000305 VOL: 0
; 0003 01B1 
; 0003 01B2   while(1) {
;PCODE: $00000306 VOL: 0
; 0003 01B3     // Эмуляция ПЗУ
; 0003 01B4 #asm
;PCODE: $00000307 VOL: 0
; 0003 01B5 .EQU PIND  = $10
.EQU PIND  = $10
;PCODE: $00000308 VOL: 0
; 0003 01B6 .EQU DDRD  = $11
.EQU DDRD  = $11
;PCODE: $00000309 VOL: 0
; 0003 01B7 .EQU PORTD = $12
.EQU PORTD = $12
;PCODE: $0000030A VOL: 0
; 0003 01B8 .EQU PINC  = $13
.EQU PINC  = $13
;PCODE: $0000030B VOL: 0
; 0003 01B9 .EQU DDRC  = $14
.EQU DDRC  = $14
;PCODE: $0000030C VOL: 0
; 0003 01BA .EQU PORTC = $15
.EQU PORTC = $15
;PCODE: $0000030D VOL: 0
; 0003 01BB .EQU PINB  = $16
.EQU PINB  = $16
;PCODE: $0000030E VOL: 0
; 0003 01BC .EQU DDRB  = $17
.EQU DDRB  = $17
;PCODE: $0000030F VOL: 0
; 0003 01BD .EQU PORTB = $18
.EQU PORTB = $18
;PCODE: $00000310 VOL: 0
; 0003 01BE .EQU ROM   = 1
.EQU ROM   = 1
;PCODE: $00000311 VOL: 0
; 0003 01BF 

;PCODE: $00000312 VOL: 0
; 0003 01C0 .macro GET_ADDR
.macro GET_ADDR
;PCODE: $00000313 VOL: 0
; 0003 01C1         IN   R30, PINC         ; Младшие 6 бит
        IN   R30, PINC         ; Младшие 6 бит
;PCODE: $00000314 VOL: 0
; 0003 01C2         ANDI R30, 0x3F
        ANDI R30, 0x3F
;PCODE: $00000315 VOL: 0
; 0003 01C3         IN   R26, PINB         ; Старший бит
        IN   R26, PINB         ; Старший бит
;PCODE: $00000316 VOL: 0
; 0003 01C4         ANDI R26, 0x40
        ANDI R26, 0x40
;PCODE: $00000317 VOL: 0
; 0003 01C5         OR   R30, R26
        OR   R30, R26
;PCODE: $00000318 VOL: 0
; 0003 01C6 .endmacro
.endmacro
;PCODE: $00000319 VOL: 0
; 0003 01C7 

;PCODE: $0000031A VOL: 0
; 0003 01C8 .macro ROM_EMU
.macro ROM_EMU
;PCODE: $0000031B VOL: 0
; 0003 01C9         LD   R30, Z
        LD   R30, Z
;PCODE: $0000031C VOL: 0
; 0003 01CA         OUT  PORTD, R30
        OUT  PORTD, R30
;PCODE: $0000031D VOL: 0
; 0003 01CB .endmacro
.endmacro
;PCODE: $0000031E VOL: 0
; 0003 01CC 

;PCODE: $0000031F VOL: 0
; 0003 01CD         ; Устаналвиается один раз для ROM_EMU
        ; Устаналвиается один раз для ROM_EMU
;PCODE: $00000320 VOL: 0
; 0003 01CE         PUSH R26
        PUSH R26
;PCODE: $00000321 VOL: 0
; 0003 01CF         PUSH R30
        PUSH R30
;PCODE: $00000322 VOL: 0
; 0003 01D0         PUSH R31
        PUSH R31
;PCODE: $00000323 VOL: 0
; 0003 01D1         LDI  R31, ROM
        LDI  R31, ROM
;PCODE: $00000324 VOL: 0
; 0003 01D2 

;PCODE: $00000325 VOL: 0
; 0003 01D3         ; Получаем адрес
        ; Получаем адрес
;PCODE: $00000326 VOL: 0
; 0003 01D4         GET_ADDR
        GET_ADDR
;PCODE: $00000327 VOL: 0
; 0003 01D5 

;PCODE: $00000328 VOL: 0
; 0003 01D6         ; Эмулируем ПЗУ
        ; Эмулируем ПЗУ
;PCODE: $00000329 VOL: 0
; 0003 01D7 LOOP0:  ROM_EMU
LOOP0:  ROM_EMU
;PCODE: $0000032A VOL: 0
; 0003 01D8 

;PCODE: $0000032B VOL: 0
; 0003 01D9         ; Получаем адрес и если это не 0x44, то переходим в начало
        ; Получаем адрес и если это не 0x44, то переходим в начало
;PCODE: $0000032C VOL: 0
; 0003 01DA         GET_ADDR
        GET_ADDR
;PCODE: $0000032D VOL: 0
; 0003 01DB         CPI  R30, 0x44
        CPI  R30, 0x44
;PCODE: $0000032E VOL: 0
; 0003 01DC         BRNE LOOP0
        BRNE LOOP0
;PCODE: $0000032F VOL: 0
; 0003 01DD 

;PCODE: $00000330 VOL: 0
; 0003 01DE         ; Эмулируем ПЗУ (0x44-ый адрес)
        ; Эмулируем ПЗУ (0x44-ый адрес)
;PCODE: $00000331 VOL: 0
; 0003 01DF         ROM_EMU
        ROM_EMU
;PCODE: $00000332 VOL: 0
; 0003 01E0 

;PCODE: $00000333 VOL: 0
; 0003 01E1         ; Получаем адрес и если это все еще 0x44, то ждем.
        ; Получаем адрес и если это все еще 0x44, то ждем.
;PCODE: $00000334 VOL: 0
; 0003 01E2         ; Если это не 0x40, то переходим в начало
        ; Если это не 0x40, то переходим в начало
;PCODE: $00000335 VOL: 0
; 0003 01E3 LOOP1:  GET_ADDR
LOOP1:  GET_ADDR
;PCODE: $00000336 VOL: 0
; 0003 01E4         CPI  R30, 0x44
        CPI  R30, 0x44
;PCODE: $00000337 VOL: 0
; 0003 01E5         BREQ LOOP1
        BREQ LOOP1
;PCODE: $00000338 VOL: 0
; 0003 01E6         CPI  R30, 0x40
        CPI  R30, 0x40
;PCODE: $00000339 VOL: 0
; 0003 01E7         BRNE LOOP0
        BRNE LOOP0
;PCODE: $0000033A VOL: 0
; 0003 01E8 

;PCODE: $0000033B VOL: 0
; 0003 01E9         ; Эмулируем ПЗУ (0x40-ый адрес)
        ; Эмулируем ПЗУ (0x40-ый адрес)
;PCODE: $0000033C VOL: 0
; 0003 01EA         ROM_EMU
        ROM_EMU
;PCODE: $0000033D VOL: 0
; 0003 01EB 

;PCODE: $0000033E VOL: 0
; 0003 01EC         ; Получаем адрес и если это все еще 0x40, то ждем.
        ; Получаем адрес и если это все еще 0x40, то ждем.
;PCODE: $0000033F VOL: 0
; 0003 01ED         ; Если это не 0, то переходим в начало
        ; Если это не 0, то переходим в начало
;PCODE: $00000340 VOL: 0
; 0003 01EE LOOP2:  GET_ADDR
LOOP2:  GET_ADDR
;PCODE: $00000341 VOL: 0
; 0003 01EF         CPI  R30, 0x40
        CPI  R30, 0x40
;PCODE: $00000342 VOL: 0
; 0003 01F0         BREQ LOOP2
        BREQ LOOP2
;PCODE: $00000343 VOL: 0
; 0003 01F1         CPI  R30, 0
        CPI  R30, 0
;PCODE: $00000344 VOL: 0
; 0003 01F2         BRNE LOOP0
        BRNE LOOP0
;PCODE: $00000345 VOL: 0
; 0003 01F3 

;PCODE: $00000346 VOL: 0
; 0003 01F4         POP R31
        POP R31
;PCODE: $00000347 VOL: 0
; 0003 01F5         POP R30
        POP R30
;PCODE: $00000348 VOL: 0
; 0003 01F6         POP R26
        POP R26
;PCODE: $00000349 VOL: 0
;PCODE: $0000034A VOL: 0
; 0003 01F7 #endasm
; 0003 01F8 
; 0003 01F9     // Зажигаем светодиод
; 0003 01FA     PORTB.0 = 1;
;PCODE: $0000034B VOL: 0
;PCODE: $0000034C VOL: 0
; 0003 01FB 
; 0003 01FC     // Проверяем наличие карты
; 0003 01FD     sendStart(ERR_START);
;PCODE: $0000034D VOL: 0
;PCODE: $0000034E VOL: 0
;PCODE: $0000034F VOL: 0
; 0003 01FE     send(ERR_WAIT);
;PCODE: $00000350 VOL: 0
;PCODE: $00000351 VOL: 0
;PCODE: $00000352 VOL: 0
; 0003 01FF     if(fs_check()) {
;PCODE: $00000353 VOL: 0
;PCODE: $00000354 VOL: 0
;PCODE: $00000355 VOL: 0
; 0003 0200       send(ERR_DISK_ERR);
;PCODE: $00000356 VOL: 0
;PCODE: $00000357 VOL: 0
;PCODE: $00000358 VOL: 0
; 0003 0201     } else {
;PCODE: $00000359 VOL: 0
;PCODE: $0000035A VOL: 0
; 0003 0202       send(ERR_OK_DISK);
;PCODE: $0000035B VOL: 0
;PCODE: $0000035C VOL: 0
;PCODE: $0000035D VOL: 0
; 0003 0203       recvStart();
;PCODE: $0000035E VOL: 0
; 0003 0204       c = wrecv();
;PCODE: $0000035F VOL: 0
;PCODE: $00000360 VOL: 0
; 0003 0205 
; 0003 0206       // Сбрасываем ошибку
; 0003 0207       lastError = 0;
;PCODE: $00000361 VOL: 0
;PCODE: $00000362 VOL: 0
; 0003 0208 
; 0003 0209       // Принимаем аргументы
; 0003 020A       switch(c) {
;PCODE: $00000363 VOL: 0
;PCODE: $00000364 VOL: 0
; 0003 020B         case 0:  cmd_boot();         break;
;PCODE: $00000365 VOL: 0
;PCODE: $00000366 VOL: 0
;PCODE: $00000367 VOL: 0
;PCODE: $00000368 VOL: 0
; 0003 020C         case 1:  cmd_ver();          break;
;PCODE: $00000369 VOL: 0
;PCODE: $0000036A VOL: 0
;PCODE: $0000036B VOL: 0
;PCODE: $0000036C VOL: 0
;PCODE: $0000036D VOL: 0
; 0003 020D         case 2:  cmd_exec();         break;
;PCODE: $0000036E VOL: 0
;PCODE: $0000036F VOL: 0
;PCODE: $00000370 VOL: 0
;PCODE: $00000371 VOL: 0
;PCODE: $00000372 VOL: 0
; 0003 020E         case 3:  cmd_find();         break;
;PCODE: $00000373 VOL: 0
;PCODE: $00000374 VOL: 0
;PCODE: $00000375 VOL: 0
;PCODE: $00000376 VOL: 0
;PCODE: $00000377 VOL: 0
; 0003 020F         case 4:  cmd_open();         break;
;PCODE: $00000378 VOL: 0
;PCODE: $00000379 VOL: 0
;PCODE: $0000037A VOL: 0
;PCODE: $0000037B VOL: 0
;PCODE: $0000037C VOL: 0
; 0003 0210         case 5:  cmd_lseek();        break;
;PCODE: $0000037D VOL: 0
;PCODE: $0000037E VOL: 0
;PCODE: $0000037F VOL: 0
;PCODE: $00000380 VOL: 0
;PCODE: $00000381 VOL: 0
; 0003 0211         case 6:  cmd_read();         break;
;PCODE: $00000382 VOL: 0
;PCODE: $00000383 VOL: 0
;PCODE: $00000384 VOL: 0
;PCODE: $00000385 VOL: 0
;PCODE: $00000386 VOL: 0
; 0003 0212         case 7:  cmd_write();        break;
;PCODE: $00000387 VOL: 0
;PCODE: $00000388 VOL: 0
;PCODE: $00000389 VOL: 0
;PCODE: $0000038A VOL: 0
;PCODE: $0000038B VOL: 0
; 0003 0213         case 8:  cmd_move();         break;
;PCODE: $0000038C VOL: 0
;PCODE: $0000038D VOL: 0
;PCODE: $0000038E VOL: 0
;PCODE: $0000038F VOL: 0
;PCODE: $00000390 VOL: 0
; 0003 0214         default: lastError = ERR_INVALID_COMMAND;
;PCODE: $00000391 VOL: 0
;PCODE: $00000392 VOL: 0
;PCODE: $00000393 VOL: 0
; 0003 0215       }
;PCODE: $00000394 VOL: 0
; 0003 0216 
; 0003 0217       // Вывод ошибки
; 0003 0218       if(lastError) sendStart(lastError);
;PCODE: $00000395 VOL: 0
;PCODE: $00000396 VOL: 0
;PCODE: $00000397 VOL: 0
;PCODE: $00000398 VOL: 0
;PCODE: $00000399 VOL: 0
;PCODE: $0000039A VOL: 0
; 0003 0219     }
;PCODE: $0000039B VOL: 0
;PCODE: $0000039C VOL: 0
; 0003 021A 
; 0003 021B     // Порт рабоатет на выход
; 0003 021C     wait();
;PCODE: $0000039D VOL: 0
; 0003 021D     DATA_OUT
;PCODE: $0000039E VOL: 0
;PCODE: $0000039F VOL: 0
; 0003 021E 
; 0003 021F     // Гасим светодиод
; 0003 0220     PORTB.0 = 0;
;PCODE: $000003A0 VOL: 0
;PCODE: $000003A1 VOL: 0
; 0003 0221   }
;PCODE: $000003A2 VOL: 0
;PCODE: $000003A3 VOL: 0
; 0003 0222 }
;PCODE: $000003A4 VOL: 0
;PCODE: $000003A5 VOL: 0
;PCODE: $000003A6 VOL: 0
